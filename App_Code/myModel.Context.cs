//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Data.Entity.Core.Objects;
using System.Linq;

public partial class projectDemoEntities : DbContext
{
    public projectDemoEntities()
        : base("name=projectDemoEntities")
    {
    }

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        throw new UnintentionalCodeFirstException();
    }

    public virtual DbSet<Department> Departments { get; set; }
    public virtual DbSet<Employee> Employees { get; set; }
    public virtual DbSet<EmpByDept> EmpByDepts { get; set; }
    public virtual DbSet<Category> Categories { get; set; }
    public virtual DbSet<Customer> Customers { get; set; }
    public virtual DbSet<OrderDetail> OrderDetails { get; set; }
    public virtual DbSet<Order> Orders { get; set; }
    public virtual DbSet<Purchase> Purchases { get; set; }
    public virtual DbSet<Stock> Stocks { get; set; }
    public virtual DbSet<UserDetail> UserDetails { get; set; }
    public virtual DbSet<Order_Subtotal> Order_Subtotals { get; set; }
    public virtual DbSet<Sales_Totals_by_Amount> Sales_Totals_by_Amounts { get; set; }
    public virtual DbSet<vw_StockInfo> vw_StockInfo { get; set; }

    public virtual int CategoriesDelete(Nullable<int> categoryID)
    {
        var categoryIDParameter = categoryID.HasValue ?
            new ObjectParameter("CategoryID", categoryID) :
            new ObjectParameter("CategoryID", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CategoriesDelete", categoryIDParameter);
    }

    public virtual ObjectResult<CategoriesGetAll_Result> CategoriesGetAll()
    {
        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CategoriesGetAll_Result>("CategoriesGetAll");
    }

    public virtual ObjectResult<CategoriesGetRecord_Result> CategoriesGetRecord(Nullable<int> categoryID)
    {
        var categoryIDParameter = categoryID.HasValue ?
            new ObjectParameter("CategoryID", categoryID) :
            new ObjectParameter("CategoryID", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CategoriesGetRecord_Result>("CategoriesGetRecord", categoryIDParameter);
    }

    public virtual int CategoriesInsert(string categoryName)
    {
        var categoryNameParameter = categoryName != null ?
            new ObjectParameter("CategoryName", categoryName) :
            new ObjectParameter("CategoryName", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CategoriesInsert", categoryNameParameter);
    }

    public virtual int CategoriesUpdate(Nullable<int> categoryID, string categoryName)
    {
        var categoryIDParameter = categoryID.HasValue ?
            new ObjectParameter("CategoryID", categoryID) :
            new ObjectParameter("CategoryID", typeof(int));

        var categoryNameParameter = categoryName != null ?
            new ObjectParameter("CategoryName", categoryName) :
            new ObjectParameter("CategoryName", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CategoriesUpdate", categoryIDParameter, categoryNameParameter);
    }

    public virtual int CustomersDelete(Nullable<int> customerID)
    {
        var customerIDParameter = customerID.HasValue ?
            new ObjectParameter("CustomerID", customerID) :
            new ObjectParameter("CustomerID", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CustomersDelete", customerIDParameter);
    }

    public virtual ObjectResult<CustomersGetAll_Result> CustomersGetAll()
    {
        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomersGetAll_Result>("CustomersGetAll");
    }

    public virtual ObjectResult<CustomersGetRecord_Result> CustomersGetRecord(Nullable<int> customerID)
    {
        var customerIDParameter = customerID.HasValue ?
            new ObjectParameter("CustomerID", customerID) :
            new ObjectParameter("CustomerID", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomersGetRecord_Result>("CustomersGetRecord", customerIDParameter);
    }

    public virtual int CustomersInsert(string customerName, string phone, string email)
    {
        var customerNameParameter = customerName != null ?
            new ObjectParameter("CustomerName", customerName) :
            new ObjectParameter("CustomerName", typeof(string));

        var phoneParameter = phone != null ?
            new ObjectParameter("Phone", phone) :
            new ObjectParameter("Phone", typeof(string));

        var emailParameter = email != null ?
            new ObjectParameter("Email", email) :
            new ObjectParameter("Email", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CustomersInsert", customerNameParameter, phoneParameter, emailParameter);
    }

    public virtual int CustomersUpdate(Nullable<int> customerID, string customerName, string phone, string email)
    {
        var customerIDParameter = customerID.HasValue ?
            new ObjectParameter("CustomerID", customerID) :
            new ObjectParameter("CustomerID", typeof(int));

        var customerNameParameter = customerName != null ?
            new ObjectParameter("CustomerName", customerName) :
            new ObjectParameter("CustomerName", typeof(string));

        var phoneParameter = phone != null ?
            new ObjectParameter("Phone", phone) :
            new ObjectParameter("Phone", typeof(string));

        var emailParameter = email != null ?
            new ObjectParameter("Email", email) :
            new ObjectParameter("Email", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CustomersUpdate", customerIDParameter, customerNameParameter, phoneParameter, emailParameter);
    }

    public virtual int OrderDetailsDelete(Nullable<int> oNO, string pID)
    {
        var oNOParameter = oNO.HasValue ?
            new ObjectParameter("ONO", oNO) :
            new ObjectParameter("ONO", typeof(int));

        var pIDParameter = pID != null ?
            new ObjectParameter("PID", pID) :
            new ObjectParameter("PID", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OrderDetailsDelete", oNOParameter, pIDParameter);
    }

    public virtual ObjectResult<OrderDetailsGetAll_Result> OrderDetailsGetAll()
    {
        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OrderDetailsGetAll_Result>("OrderDetailsGetAll");
    }

    public virtual ObjectResult<OrderDetailsGetRecord_Result> OrderDetailsGetRecord(Nullable<int> oNO, string pID)
    {
        var oNOParameter = oNO.HasValue ?
            new ObjectParameter("ONO", oNO) :
            new ObjectParameter("ONO", typeof(int));

        var pIDParameter = pID != null ?
            new ObjectParameter("PID", pID) :
            new ObjectParameter("PID", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OrderDetailsGetRecord_Result>("OrderDetailsGetRecord", oNOParameter, pIDParameter);
    }

    public virtual int OrderDetailsInsert(Nullable<int> oNO, string pID, Nullable<int> saleQty, Nullable<decimal> salePrice)
    {
        var oNOParameter = oNO.HasValue ?
            new ObjectParameter("ONO", oNO) :
            new ObjectParameter("ONO", typeof(int));

        var pIDParameter = pID != null ?
            new ObjectParameter("PID", pID) :
            new ObjectParameter("PID", typeof(string));

        var saleQtyParameter = saleQty.HasValue ?
            new ObjectParameter("SaleQty", saleQty) :
            new ObjectParameter("SaleQty", typeof(int));

        var salePriceParameter = salePrice.HasValue ?
            new ObjectParameter("SalePrice", salePrice) :
            new ObjectParameter("SalePrice", typeof(decimal));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OrderDetailsInsert", oNOParameter, pIDParameter, saleQtyParameter, salePriceParameter);
    }

    public virtual int OrderDetailsUpdate(Nullable<int> oNO, string pID, Nullable<int> saleQty, Nullable<decimal> salePrice)
    {
        var oNOParameter = oNO.HasValue ?
            new ObjectParameter("ONO", oNO) :
            new ObjectParameter("ONO", typeof(int));

        var pIDParameter = pID != null ?
            new ObjectParameter("PID", pID) :
            new ObjectParameter("PID", typeof(string));

        var saleQtyParameter = saleQty.HasValue ?
            new ObjectParameter("SaleQty", saleQty) :
            new ObjectParameter("SaleQty", typeof(int));

        var salePriceParameter = salePrice.HasValue ?
            new ObjectParameter("SalePrice", salePrice) :
            new ObjectParameter("SalePrice", typeof(decimal));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OrderDetailsUpdate", oNOParameter, pIDParameter, saleQtyParameter, salePriceParameter);
    }

    public virtual int OrdersDelete(Nullable<int> oNO)
    {
        var oNOParameter = oNO.HasValue ?
            new ObjectParameter("ONO", oNO) :
            new ObjectParameter("ONO", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OrdersDelete", oNOParameter);
    }

    public virtual ObjectResult<OrdersGetAll_Result> OrdersGetAll()
    {
        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OrdersGetAll_Result>("OrdersGetAll");
    }

    public virtual ObjectResult<OrdersGetRecord_Result> OrdersGetRecord(Nullable<int> oNO, Nullable<int> customerID)
    {
        var oNOParameter = oNO.HasValue ?
            new ObjectParameter("ONO", oNO) :
            new ObjectParameter("ONO", typeof(int));

        var customerIDParameter = customerID.HasValue ?
            new ObjectParameter("CustomerID", customerID) :
            new ObjectParameter("CustomerID", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OrdersGetRecord_Result>("OrdersGetRecord", oNOParameter, customerIDParameter);
    }

    public virtual int OrdersInsert(Nullable<int> customerID, Nullable<System.DateTime> oDate, Nullable<decimal> grandTotal, Nullable<System.DateTime> shippedDate)
    {
        var customerIDParameter = customerID.HasValue ?
            new ObjectParameter("CustomerID", customerID) :
            new ObjectParameter("CustomerID", typeof(int));

        var oDateParameter = oDate.HasValue ?
            new ObjectParameter("ODate", oDate) :
            new ObjectParameter("ODate", typeof(System.DateTime));

        var grandTotalParameter = grandTotal.HasValue ?
            new ObjectParameter("GrandTotal", grandTotal) :
            new ObjectParameter("GrandTotal", typeof(decimal));

        var shippedDateParameter = shippedDate.HasValue ?
            new ObjectParameter("ShippedDate", shippedDate) :
            new ObjectParameter("ShippedDate", typeof(System.DateTime));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OrdersInsert", customerIDParameter, oDateParameter, grandTotalParameter, shippedDateParameter);
    }

    public virtual int OrdersUpdate(Nullable<int> oNO, Nullable<int> customerID, Nullable<System.DateTime> oDate, Nullable<decimal> grandTotal, Nullable<System.DateTime> shippedDate)
    {
        var oNOParameter = oNO.HasValue ?
            new ObjectParameter("ONO", oNO) :
            new ObjectParameter("ONO", typeof(int));

        var customerIDParameter = customerID.HasValue ?
            new ObjectParameter("CustomerID", customerID) :
            new ObjectParameter("CustomerID", typeof(int));

        var oDateParameter = oDate.HasValue ?
            new ObjectParameter("ODate", oDate) :
            new ObjectParameter("ODate", typeof(System.DateTime));

        var grandTotalParameter = grandTotal.HasValue ?
            new ObjectParameter("GrandTotal", grandTotal) :
            new ObjectParameter("GrandTotal", typeof(decimal));

        var shippedDateParameter = shippedDate.HasValue ?
            new ObjectParameter("ShippedDate", shippedDate) :
            new ObjectParameter("ShippedDate", typeof(System.DateTime));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OrdersUpdate", oNOParameter, customerIDParameter, oDateParameter, grandTotalParameter, shippedDateParameter);
    }

    public virtual int PurchaseDelete(Nullable<int> pNO)
    {
        var pNOParameter = pNO.HasValue ?
            new ObjectParameter("PNO", pNO) :
            new ObjectParameter("PNO", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PurchaseDelete", pNOParameter);
    }

    public virtual int PurchaseGetAll()
    {
        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PurchaseGetAll");
    }

    public virtual int PurchaseGetRecord(Nullable<int> pNO, Nullable<int> sID, Nullable<int> categoryID)
    {
        var pNOParameter = pNO.HasValue ?
            new ObjectParameter("PNO", pNO) :
            new ObjectParameter("PNO", typeof(int));

        var sIDParameter = sID.HasValue ?
            new ObjectParameter("SID", sID) :
            new ObjectParameter("SID", typeof(int));

        var categoryIDParameter = categoryID.HasValue ?
            new ObjectParameter("CategoryID", categoryID) :
            new ObjectParameter("CategoryID", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PurchaseGetRecord", pNOParameter, sIDParameter, categoryIDParameter);
    }

    public virtual int PurchaseInsert(string pID, string pName, Nullable<decimal> uPrice, Nullable<int> qty, Nullable<System.DateTime> pDate, Nullable<int> rLevel, Nullable<int> sID, Nullable<int> categoryID)
    {
        var pIDParameter = pID != null ?
            new ObjectParameter("PID", pID) :
            new ObjectParameter("PID", typeof(string));

        var pNameParameter = pName != null ?
            new ObjectParameter("PName", pName) :
            new ObjectParameter("PName", typeof(string));

        var uPriceParameter = uPrice.HasValue ?
            new ObjectParameter("UPrice", uPrice) :
            new ObjectParameter("UPrice", typeof(decimal));

        var qtyParameter = qty.HasValue ?
            new ObjectParameter("Qty", qty) :
            new ObjectParameter("Qty", typeof(int));

        var pDateParameter = pDate.HasValue ?
            new ObjectParameter("PDate", pDate) :
            new ObjectParameter("PDate", typeof(System.DateTime));

        var rLevelParameter = rLevel.HasValue ?
            new ObjectParameter("RLevel", rLevel) :
            new ObjectParameter("RLevel", typeof(int));

        var sIDParameter = sID.HasValue ?
            new ObjectParameter("SID", sID) :
            new ObjectParameter("SID", typeof(int));

        var categoryIDParameter = categoryID.HasValue ?
            new ObjectParameter("CategoryID", categoryID) :
            new ObjectParameter("CategoryID", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PurchaseInsert", pIDParameter, pNameParameter, uPriceParameter, qtyParameter, pDateParameter, rLevelParameter, sIDParameter, categoryIDParameter);
    }

    public virtual int PurchaseUpdate(Nullable<int> pNO, string pID, string pName, Nullable<decimal> uPrice, Nullable<int> qty, Nullable<System.DateTime> pDate, Nullable<int> rLevel, Nullable<int> sID, Nullable<int> categoryID)
    {
        var pNOParameter = pNO.HasValue ?
            new ObjectParameter("PNO", pNO) :
            new ObjectParameter("PNO", typeof(int));

        var pIDParameter = pID != null ?
            new ObjectParameter("PID", pID) :
            new ObjectParameter("PID", typeof(string));

        var pNameParameter = pName != null ?
            new ObjectParameter("PName", pName) :
            new ObjectParameter("PName", typeof(string));

        var uPriceParameter = uPrice.HasValue ?
            new ObjectParameter("UPrice", uPrice) :
            new ObjectParameter("UPrice", typeof(decimal));

        var qtyParameter = qty.HasValue ?
            new ObjectParameter("Qty", qty) :
            new ObjectParameter("Qty", typeof(int));

        var pDateParameter = pDate.HasValue ?
            new ObjectParameter("PDate", pDate) :
            new ObjectParameter("PDate", typeof(System.DateTime));

        var rLevelParameter = rLevel.HasValue ?
            new ObjectParameter("RLevel", rLevel) :
            new ObjectParameter("RLevel", typeof(int));

        var sIDParameter = sID.HasValue ?
            new ObjectParameter("SID", sID) :
            new ObjectParameter("SID", typeof(int));

        var categoryIDParameter = categoryID.HasValue ?
            new ObjectParameter("CategoryID", categoryID) :
            new ObjectParameter("CategoryID", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PurchaseUpdate", pNOParameter, pIDParameter, pNameParameter, uPriceParameter, qtyParameter, pDateParameter, rLevelParameter, sIDParameter, categoryIDParameter);
    }
}
